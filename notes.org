* Problem statement

The goal of this project is to enhance the =argocd diff= and =kubectl diff= user experience.

** Ideas for improvements

- Control over what is diffed
  - Limit the diff to a given =.kind= of resources, for example =Pod=
  - Limit the scope of the diff, for example to the resource =.spec=
  - Remove noisy fields from the diff, such as =last-applied-configuration=
  - More generally, allow arbitrary =yq= preprocessing of manifests before the diff
- Ability to still choose custom diff tool
  - use any of =dyff=, =difftastic=, =delta= etc...

** Examples

#+begin_src bash
  # Assume the script is called kdiff
  # Should output a helpful message
  kdiff --help

  # Diff only the resource specs
  # Use kubectl diff as default command, and forward all arguments after --
  kdiff --scope=.spec -- -rR overlays/staging

  # Show the diff for services and pods
  kdiff --kind=svc,po -- argocd diff myapp

  # Use kdiff with a predefined set of arguments as KUBECTL_EXTERNAL_DIFF
  # kdiff should know wether it is invoked interactively, or as KUBECTL_EXTERNAL_DIFF
  export KUBECTL_EXTERNAL_DIFF="kdiff --yq '... style=\"\" | del(.metadata.labels)'"
  kubectl diff -f mypod.yaml

  # The user should be able to use any diff tool
  KUBECTL_EXTERNAL_DIFF=fancydiff
  kdiff --ignore=.metadata.labels,.spec.affinity -- -f mydeploy.yaml
#+end_src

** Design considerations

- Diff generation
  - Hooking into =KUBECTL_EXTERNAL_DIFF= seems a good idea
  - It should be possible to call the script interactively,
    or assign it directly to =KUBECTL_EXTERNAL_DIFF=
  - If called interactively,
    the users original =KUBECTL_EXTERNAL_DIFF= should be taken into consideration
  - Bash could be a suitable programming language for this part,
    but I am open to suggestions
- The script name should be short, elegant and convey the ideas of flexibility, kubernetes, and diffing.


* Brainstorming instructions
- Help me brainstorm around this initial idea
- Help me produce and actionable plan, captured in Markdown format
- Structure your thoughts in three sections:
  - MVP design
    - Very actionable outline to code a minimal working version of the tool
  - Next steps
    - The most important improvements after MVP
  - Wild ideas
    - What inspires you!


* Agent context

- You can find an initial design plan in =PLAN.md=
- You should create a =TODO.md= file that will hold finer-grained task descriptions and concrete next steps.
- You should regularly commit your changes to the branch =<agent>/main=
